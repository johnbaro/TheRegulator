//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace Regulator.SDK {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class QuickMenu : DataSet {
        
        private MenuItemDataTable tableMenuItem;
        
        private DataRelation relationMenuItem_MenuItem;
        
        public QuickMenu() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected QuickMenu(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["MenuItem"] != null)) {
                    this.Tables.Add(new MenuItemDataTable(ds.Tables["MenuItem"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MenuItemDataTable MenuItem {
            get {
                return this.tableMenuItem;
            }
        }
        
        public override DataSet Clone() {
            QuickMenu cln = ((QuickMenu)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["MenuItem"] != null)) {
                this.Tables.Add(new MenuItemDataTable(ds.Tables["MenuItem"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableMenuItem = ((MenuItemDataTable)(this.Tables["MenuItem"]));
            if ((this.tableMenuItem != null)) {
                this.tableMenuItem.InitVars();
            }
            this.relationMenuItem_MenuItem = this.Relations["MenuItem_MenuItem"];
        }
        
        private void InitClass() {
            this.DataSetName = "QuickMenu";
            this.Prefix = "";
            this.Namespace = "";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableMenuItem = new MenuItemDataTable();
            this.Tables.Add(this.tableMenuItem);
            ForeignKeyConstraint fkc;
            fkc = new ForeignKeyConstraint("MenuItem_MenuItem", new DataColumn[] {
                        this.tableMenuItem.MenuItem_IdColumn}, new DataColumn[] {
                        this.tableMenuItem.MenuItem_Id_0Column});
            this.tableMenuItem.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            this.relationMenuItem_MenuItem = new DataRelation("MenuItem_MenuItem", new DataColumn[] {
                        this.tableMenuItem.MenuItem_IdColumn}, new DataColumn[] {
                        this.tableMenuItem.MenuItem_Id_0Column}, false);
            this.relationMenuItem_MenuItem.Nested = true;
            this.Relations.Add(this.relationMenuItem_MenuItem);
        }
        
        private bool ShouldSerializeMenuItem() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void MenuItemRowChangeEventHandler(object sender, MenuItemRowChangeEvent e);

		
		public void TestReadXML()
		{
			QuickMenu menu = new QuickMenu();
			menu.ReadXml(@"..\..\QuickMenu.config");
			
			Console.WriteLine(menu.MenuItem.Count);
		}
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class MenuItemDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnname;
            
            private DataColumn columnvalue;
            
            private DataColumn columnMenuItem_Id;
            
            private DataColumn columnMenuItem_Id_0;
            
            internal MenuItemDataTable() : 
                    base("MenuItem") {
                this.InitClass();
            }
            
            internal MenuItemDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            internal DataColumn valueColumn {
                get {
                    return this.columnvalue;
                }
            }
            
            internal DataColumn MenuItem_IdColumn {
                get {
                    return this.columnMenuItem_Id;
                }
            }
            
            internal DataColumn MenuItem_Id_0Column {
                get {
                    return this.columnMenuItem_Id_0;
                }
            }
            
            public MenuItemRow this[int index] {
                get {
                    return ((MenuItemRow)(this.Rows[index]));
                }
            }
            
            public event MenuItemRowChangeEventHandler MenuItemRowChanged;
            
            public event MenuItemRowChangeEventHandler MenuItemRowChanging;
            
            public event MenuItemRowChangeEventHandler MenuItemRowDeleted;
            
            public event MenuItemRowChangeEventHandler MenuItemRowDeleting;
            
            public void AddMenuItemRow(MenuItemRow row) {
                this.Rows.Add(row);
            }
            
            public MenuItemRow AddMenuItemRow(string name, string value, MenuItemRow parentMenuItemRowByMenuItem_MenuItem) {
                MenuItemRow rowMenuItemRow = ((MenuItemRow)(this.NewRow()));
                rowMenuItemRow.ItemArray = new object[] {
                        name,
                        value,
                        null,
                        parentMenuItemRowByMenuItem_MenuItem[2]};
                this.Rows.Add(rowMenuItemRow);
                return rowMenuItemRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                MenuItemDataTable cln = ((MenuItemDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new MenuItemDataTable();
            }
            
            internal void InitVars() {
                this.columnname = this.Columns["name"];
                this.columnvalue = this.Columns["value"];
                this.columnMenuItem_Id = this.Columns["MenuItem_Id"];
                this.columnMenuItem_Id_0 = this.Columns["MenuItem_Id_0"];
            }
            
            private void InitClass() {
                this.columnname = new DataColumn("name", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnname);
                this.columnvalue = new DataColumn("value", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnvalue);
                this.columnMenuItem_Id = new DataColumn("MenuItem_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnMenuItem_Id);
                this.columnMenuItem_Id_0 = new DataColumn("MenuItem_Id_0", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnMenuItem_Id_0);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnMenuItem_Id}, true));
                this.columnname.Namespace = "";
                this.columnvalue.Namespace = "";
                this.columnMenuItem_Id.AutoIncrement = true;
                this.columnMenuItem_Id.AllowDBNull = false;
                this.columnMenuItem_Id.Unique = true;
                this.Namespace = "";
            }
            
            public MenuItemRow NewMenuItemRow() {
                return ((MenuItemRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new MenuItemRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(MenuItemRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MenuItemRowChanged != null)) {
                    this.MenuItemRowChanged(this, new MenuItemRowChangeEvent(((MenuItemRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MenuItemRowChanging != null)) {
                    this.MenuItemRowChanging(this, new MenuItemRowChangeEvent(((MenuItemRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MenuItemRowDeleted != null)) {
                    this.MenuItemRowDeleted(this, new MenuItemRowChangeEvent(((MenuItemRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MenuItemRowDeleting != null)) {
                    this.MenuItemRowDeleting(this, new MenuItemRowChangeEvent(((MenuItemRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveMenuItemRow(MenuItemRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class MenuItemRow : DataRow {
            
            private MenuItemDataTable tableMenuItem;
            
            internal MenuItemRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableMenuItem = ((MenuItemDataTable)(this.Table));
            }
            
            public string name {
                get {
                    try {
                        return ((string)(this[this.tableMenuItem.nameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMenuItem.nameColumn] = value;
                }
            }
            
            public string value {
                get {
                    try {
                        return ((string)(this[this.tableMenuItem.valueColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMenuItem.valueColumn] = value;
                }
            }
            
            public MenuItemRow MenuItemRowParent {
                get {
                    return ((MenuItemRow)(this.GetParentRow(this.Table.ParentRelations["MenuItem_MenuItem"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["MenuItem_MenuItem"]);
                }
            }
            
            public bool IsnameNull() {
                return this.IsNull(this.tableMenuItem.nameColumn);
            }
            
            public void SetnameNull() {
                this[this.tableMenuItem.nameColumn] = System.Convert.DBNull;
            }
            
            public bool IsvalueNull() {
                return this.IsNull(this.tableMenuItem.valueColumn);
            }
            
            public void SetvalueNull() {
                this[this.tableMenuItem.valueColumn] = System.Convert.DBNull;
            }
            
            public MenuItemRow[] GetMenuItemRows() {
                return ((MenuItemRow[])(this.GetChildRows(this.Table.ChildRelations["MenuItem_MenuItem"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class MenuItemRowChangeEvent : EventArgs {
            
            private MenuItemRow eventRow;
            
            private DataRowAction eventAction;
            
            public MenuItemRowChangeEvent(MenuItemRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public MenuItemRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
